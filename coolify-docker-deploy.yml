# Coolify Docker 容器部署配置
# 此配置專門用於使用預構建的Docker映像進行部署

version: '3.8'

services:
  # PostgreSQL 資料庫服務
  database:
    image: postgres:15-alpine
    container_name: fullstack-postgres
    environment:
      POSTGRES_DB: casino
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d casino"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - fullstack-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 後端 API 服務 (使用預構建映像)
  backend:
    image: billyziiii/fullstack-docker-app-backend:latest
    container_name: fullstack-backend
    environment:
      NODE_ENV: production
      PORT: 5000
      DATABASE_URL: postgresql://app_user:${POSTGRES_PASSWORD}@database:5432/casino
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGIN: ${FRONTEND_URL}
      # 速率限制配置
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      # 日誌配置
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "5000:5000"
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - fullstack-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # 前端應用服務 (使用預構建映像)
  frontend:
    image: billyziiii/fullstack-docker-app-frontend:latest
    container_name: fullstack-frontend
    environment:
      VITE_API_URL: ${BACKEND_URL}/api
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - fullstack-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.15'

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/coolify/data/postgres

networks:
  fullstack-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Coolify 特定配置
x-coolify:
  # 項目信息
  project:
    name: fullstack-casino-docker
    description: "Fullstack Casino 應用程式 - Docker 容器部署"
    
  # 服務配置
  services:
    frontend:
      type: application
      domains:
        - ${FRONTEND_DOMAIN}
      port: 80
      proxy:
        type: traefik
        ssl: true
        redirect_to_https: true
        custom_headers:
          X-Frame-Options: "DENY"
          X-Content-Type-Options: "nosniff"
          X-XSS-Protection: "1; mode=block"
          Referrer-Policy: "strict-origin-when-cross-origin"
      
    backend:
      type: application
      domains:
        - ${BACKEND_DOMAIN}
      port: 5000
      proxy:
        type: traefik
        ssl: true
        redirect_to_https: true
        path_prefix: /api
        custom_headers:
          X-Frame-Options: "DENY"
          X-Content-Type-Options: "nosniff"
          X-XSS-Protection: "1; mode=block"
    
    database:
      type: database
      backup:
        enabled: true
        schedule: "0 2 * * *"
        retention: 30
        compression: gzip

  # 必需的環境變數
  environment:
    required:
      - POSTGRES_PASSWORD
      - JWT_SECRET
      - FRONTEND_DOMAIN
      - BACKEND_DOMAIN
      - FRONTEND_URL
      - BACKEND_URL
      - FRONTEND_IMAGE
      - BACKEND_IMAGE
    
    # 可選的環境變數
    optional:
      - RATE_LIMIT_WINDOW_MS
      - RATE_LIMIT_MAX_REQUESTS
      - LOG_LEVEL

  # 映像拉取配置
  images:
    pull_policy: always
    registry_auth:
      enabled: true
      registry: docker.io
      username: ${DOCKER_HUB_USERNAME}
      password: ${DOCKER_HUB_TOKEN}

  # 監控配置
  monitoring:
    enabled: true
    healthchecks: true
    metrics:
      enabled: true
      port: 9090
    logs:
      retention: 7d
      max_size: 100m
      driver: json-file

  # 安全配置
  security:
    network_isolation: true
    read_only_root_filesystem: false
    no_new_privileges: true
    user_namespace: true

  # 備份配置
  backup:
    database:
      enabled: true
      schedule: "0 2 * * *"
      retention: 30
      storage:
        type: local
        path: /var/lib/coolify/backups
    
    volumes:
      enabled: true
      schedule: "0 3 * * *"
      retention: 7

  # 更新策略
  update:
    strategy: rolling
    max_unavailable: 1
    health_check_grace_period: 60s
    
  # 資源限制
  resources:
    global:
      memory_limit: 2G
      cpu_limit: 2.0
    
    per_service:
      database:
        memory: 512M
        cpu: 0.5
      backend:
        memory: 512M
        cpu: 0.5
      frontend:
        memory: 256M
        cpu: 0.3

  # 網路配置
  network:
    driver: bridge
    enable_ipv6: false
    internal: false
    
  # 日誌配置
  logging:
    driver: json-file
    options:
      max-size: "10m"
      max-file: "3"
      
  # 重啟策略
  restart:
    policy: unless-stopped
    max_attempts: 3
    delay: 10s